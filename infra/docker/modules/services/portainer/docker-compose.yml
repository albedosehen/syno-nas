# ===========================================
# PORTAINER SERVICE
# ===========================================
# Docker container management UI using shared infrastructure
# Integrated with centralized Doppler secrets management

services:
  portainer:
    image: portainer/portainer-ce:lts
    container_name: portainer
    restart: unless-stopped

    depends_on:
      doppler-core:
        condition: service_healthy

    command:
      - -H
      - unix:///var/run/docker.sock
      - --admin-password-file
      - /keyvault/portainer_admin_password

    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      - LOCAL_NETWORK_ONLY=${LOCAL_NETWORK_ONLY:-true}

    ports:
      - "${PORTAINER_PORT:-9000}:9000"
      - "${PORTAINER_EDGE_PORT:-8000}:8000"

    volumes:
      # Docker socket for container management
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Portainer data persistence
      - ${PORTAINER_DATA_PATH:-./data}:/data
      # Docker volumes access for Synology
      - ${SYNOLOGY_DOCKER_PATH:-/volume1/docker}:/var/lib/docker/volumes:ro
      # Shared keyvault for secrets
      - syno_core_keyvault:/keyvault:ro
      # Shared logs
      - syno_core_logs:/logs

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    deploy:
      resources:
        limits:
          memory: ${PORTAINER_MEMORY_LIMIT:-512M}
        reservations:
          memory: ${PORTAINER_MEMORY_RESERVATION:-256M}

    networks:
      - syno-core-network

    labels:
      - "traefik.enable=false"
      - "com.synology.portainer.description=Docker container management UI"
      - "com.synology.portainer.category=management"
      - "com.synology.portainer.scope=core"

networks:
  syno-core-network:
    external: true

volumes:
  syno_core_keyvault:
    external: true
  syno_core_logs:
    external: true